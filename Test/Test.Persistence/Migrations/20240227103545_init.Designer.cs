// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Persistence;

#nullable disable

namespace Test.Persistence.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20240227103545_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Test.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Test.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PreInvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PreInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PreInvoiceDetailId");

                    b.HasIndex("PreInvoiceHeaderId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Test.Domain.PreInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PreInvoiceHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("PreInvoiceDetails");
                });

            modelBuilder.Entity("Test.Domain.PreInvoiceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SalesLineId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesLineId");

                    b.HasIndex("SellerId");

                    b.ToTable("PreInvoiceHeaders");
                });

            modelBuilder.Entity("Test.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Test.Domain.ProductSaleLine", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesLineId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SalesLineId");

                    b.HasIndex("SalesLineId");

                    b.ToTable("ProductSaleLines");
                });

            modelBuilder.Entity("Test.Domain.SalesLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SalesLines");
                });

            modelBuilder.Entity("Test.Domain.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesLineId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Test.Domain.Discount", b =>
                {
                    b.HasOne("Test.Domain.PreInvoiceDetail", "PreInvoiceDetail")
                        .WithMany()
                        .HasForeignKey("PreInvoiceDetailId");

                    b.HasOne("Test.Domain.PreInvoiceHeader", "PreInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PreInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreInvoiceDetail");

                    b.Navigation("PreInvoiceHeader");
                });

            modelBuilder.Entity("Test.Domain.PreInvoiceDetail", b =>
                {
                    b.HasOne("Test.Domain.PreInvoiceHeader", "PreInvoiceHeader")
                        .WithMany("PreInvoiceDetails")
                        .HasForeignKey("PreInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.Product", "Product")
                        .WithMany("PreInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreInvoiceHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Test.Domain.PreInvoiceHeader", b =>
                {
                    b.HasOne("Test.Domain.Customer", "Customer")
                        .WithMany("PreInvoiceHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.SalesLine", "SalesLine")
                        .WithMany("PreInvoiceHeaders")
                        .HasForeignKey("SalesLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.Seller", "Seller")
                        .WithMany("PreInvoiceHeaders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesLine");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Test.Domain.ProductSaleLine", b =>
                {
                    b.HasOne("Test.Domain.Product", "Product")
                        .WithMany("ProductSaleLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.SalesLine", "SalesLine")
                        .WithMany("ProductSaleLines")
                        .HasForeignKey("SalesLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesLine");
                });

            modelBuilder.Entity("Test.Domain.Seller", b =>
                {
                    b.HasOne("Test.Domain.SalesLine", "SalesLine")
                        .WithMany()
                        .HasForeignKey("SalesLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesLine");
                });

            modelBuilder.Entity("Test.Domain.Customer", b =>
                {
                    b.Navigation("PreInvoiceHeaders");
                });

            modelBuilder.Entity("Test.Domain.PreInvoiceHeader", b =>
                {
                    b.Navigation("PreInvoiceDetails");
                });

            modelBuilder.Entity("Test.Domain.Product", b =>
                {
                    b.Navigation("PreInvoiceDetails");

                    b.Navigation("ProductSaleLines");
                });

            modelBuilder.Entity("Test.Domain.SalesLine", b =>
                {
                    b.Navigation("PreInvoiceHeaders");

                    b.Navigation("ProductSaleLines");
                });

            modelBuilder.Entity("Test.Domain.Seller", b =>
                {
                    b.Navigation("PreInvoiceHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
